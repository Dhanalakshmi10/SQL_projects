CREATE TABLE PRICE (
PRICE_CODE		int  PRIMARY KEY,
PRICE_DESCRIPTION	VARCHAR(20)  NOT NULL  ,
PRICE_RENTFEE		Number(4,2) CHECK (PRICE_RENTFEE >= 0),
PRICE_DAILYLATEFEE	Number(2,1) CHECK (PRICE_DAILYLATEFEE >= 0)
);

CREATE TABLE MOVIE (
MOVIE_NUM	int  PRIMARY KEY,
MOVIE_TITLE	VARCHAR(75) NOT NULL,
MOVIE_YEAR	int  CHECK (MOVIE_YEAR > 1900),
MOVIE_COST	Number(4,2),
MOVIE_GENRE	VARCHAR(50),
PRICE_CODE	int CONSTRAINT MOVIE_PRICE_CODE_FK REFERENCES PRICE
);

CREATE TABLE VIDEO (
VID_NUM		int PRIMARY KEY,
VID_INDATE		DATE,
MOVIE_NUM	int CONSTRAINT VIDEO_MOVIE_NUM_FK REFERENCES MOVIE
);

CREATE TABLE MEMBERSHIP (
MEM_NUM		int PRIMARY KEY,
MEM_FNAME	VARCHAR(30) NOT NULL,
MEM_LNAME	VARCHAR(30) NOT NULL,
MEM_STREET	VARCHAR(120),
MEM_CITY		VARCHAR(50),
MEM_STATE	CHAR(2),
MEM_ZIP		CHAR(5),
MEM_BALANCE	  int
);

CREATE TABLE RENTAL (
RENT_NUM	int PRIMARY KEY,
RENT_DATE	DATE DEFAULT SYSDATE,
MEM_NUM	int CONSTRAINT RENTAL_MEM_NUM_FK REFERENCES MEMBERSHIP
);


CREATE TABLE DETAILRENTAL (
RENT_NUM			int CONSTRAINT DETAIL_RENT_NUM_FK REFERENCES RENTAL,
VID_NUM			int CONSTRAINT DETAIL_VID_NUM_FK REFERENCES VIDEO,
DETAIL_FEE			Number(4,2),
DETAIL_DUEDATE		DATE,
DETAIL_RETURNDATE	DATE,
DETAIL_DAILYLATEFEE	Number(4,2),
CONSTRAINT DETAIL_RENT_VID_PK PRIMARY KEY (RENT_NUM, VID_NUM)
);


-- PRICE
INSERT INTO PRICE VALUES (1, 'Standard', 2.5, 1);
INSERT INTO PRICE VALUES (2, 'New Release',4, 3);
INSERT INTO PRICE VALUES (3, 'Discount', 2, 1);
INSERT INTO PRICE VALUES (4, 'Weekly Special', 1, .5);

--MOVIE
INSERT INTO MOVIE VALUES (1234, 'The Cesar Family Christmas', 2009, 39.95, 'FAMILY', 2);
INSERT INTO MOVIE VALUES (1235, 'Smokey Mountain Wildlife', 2006, 59.95, 'ACTION', 1);
INSERT INTO MOVIE VALUES (1236, 'Richard Goodhope', 2010, 59.95, 'DRAMA', 2);
INSERT INTO MOVIE VALUES (1237, 'Beatnik Fever', 2009, 29.95, 'COMEDY', 2);
INSERT INTO MOVIE VALUES (1238, 'Constant Companion', 2010, 89.95, 'DRAMA', NULL);
INSERT INTO MOVIE VALUES (1239, 'Where Hope Dies', 2000, 25.49, 'DRAMA', 3);
INSERT INTO MOVIE VALUES (1245, 'Time to Burn', 2007, 45.49, 'ACTION', 1);
INSERT INTO MOVIE VALUES (1246, 'What He Doesn''t Know', 2008, 58.29, 'COMEDY', 1);

-- VIDEO:
INSERT INTO VIDEO VALUES (34341, '22-JAN-09', 1235);
INSERT INTO VIDEO VALUES (34342, '22-JAN-09', 1235);
INSERT INTO VIDEO VALUES (34366, '02-MAR-11', 1236);
INSERT INTO VIDEO VALUES (34367, '02-MAR-11', 1236);
INSERT INTO VIDEO VALUES (34368, '02-MAR-11', 1236);
INSERT INTO VIDEO VALUES (34369, '02-MAR-11', 1236);
INSERT INTO VIDEO VALUES (44392, '21-OCT-10', 1237);
INSERT INTO VIDEO VALUES (44397, '21-OCT-10', 1237);
INSERT INTO VIDEO VALUES (54321, '18-JUN-10', 1234);
INSERT INTO VIDEO VALUES (54324, '18-JUN-10', 1234);
INSERT INTO VIDEO VALUES (54325, '18-JUN-10', 1234);
INSERT INTO VIDEO VALUES (59237, '14-FEB-11', 1237);
INSERT INTO VIDEO VALUES (61353, '28-JAN-08', 1245);
INSERT INTO VIDEO VALUES (61354, '28-JAN-08', 1245);
INSERT INTO VIDEO VALUES (61367, '30-JUL-10', 1246);
INSERT INTO VIDEO VALUES (61369, '30-JUL-10', 1246);
INSERT INTO VIDEO VALUES (61388, '25-JAN-09', 1239);

--MEMBERSHIP:
INSERT INTO MEMBERSHIP VALUES (102, 'TAMI', 'DAWSON', '2632 TAKLI CIRCLE', 'NORENE', 'TN', '37136', 11);
INSERT INTO MEMBERSHIP VALUES (103, 'CURT', 'KNIGHT', '4025 CORNELL COURT', 'FLATGAP', 'KY', '41219', 6);
INSERT INTO MEMBERSHIP VALUES (104, 'JAMAL', 'MELENDEZ', '788 EAST 145TH AVENUE', 'QUEBECK', 'TN', '38579', 0);
INSERT INTO MEMBERSHIP VALUES (105, 'IVA', 'MCCLAIN', '6045 MUSKET BALL CIRCLE', 'SUMMIT', 'KY', '42783', 15);
INSERT INTO MEMBERSHIP VALUES (106, 'MIRANDA', 'PARKS', '4469 MAXWELL PLACE', 'GERMANTOWN', 'TN', '38183', 0);
INSERT INTO MEMBERSHIP VALUES (107, 'ROSARIO', 'ELLIOTT', '7578 DANNER AVENUE', 'COLUMBIA', 'TN', '38402', 5);
INSERT INTO MEMBERSHIP VALUES (108, 'MATTIE', 'GUY', '4390 EVERGREEN STREET', 'LILY', 'KY', '40740', 0);
INSERT INTO MEMBERSHIP VALUES (109, 'CLINT', 'OCHOA', '1711 ELM STREET', 'GREENEVILLE', 'TN', '37745', 10);
INSERT INTO MEMBERSHIP VALUES (110, 'LEWIS', 'ROSALES', '4524 SOUTHWIND CIRCLE', 'COUNCE', 'TN', '38326', 0);
INSERT INTO MEMBERSHIP VALUES (111, 'STACY', 'MANN', '2789 EAST COOK AVENUE', 'MURFREESBORO', 'TN', '37132', 8);
INSERT INTO MEMBERSHIP VALUES (112, 'LUIS', 'TRUJILLO', '7267 MELVIN AVENUE', 'HEISKELL', 'TN', '37754', 3);
INSERT INTO MEMBERSHIP VALUES (113, 'MINNIE', 'GONZALES', '6430 VASILI DRIVE', 'WILLISTON', 'TN', '38076', 0);

--RENTAL:
INSERT INTO RENTAL VALUES (1001, '01-MAR-11', 103);
INSERT INTO RENTAL VALUES (1002, '01-MAR-11', 105);
INSERT INTO RENTAL VALUES (1003, '02-MAR-11', 102);
INSERT INTO RENTAL VALUES (1004, '02-MAR-11', 110);
INSERT INTO RENTAL VALUES (1005, '02-MAR-11', 111);
INSERT INTO RENTAL VALUES (1006, '02-MAR-11', 107);
INSERT INTO RENTAL VALUES (1007, '02-MAR-11', 104);
INSERT INTO RENTAL VALUES (1008, '03-MAR-11', 105);
INSERT INTO RENTAL VALUES (1009, '03-MAR-11', 111);

--DETAILRENTAL:
INSERT INTO DETAILRENTAL VALUES (1001, 34342, 2, '04-MAR-11', '02-MAR-11', 1);
INSERT INTO DETAILRENTAL VALUES (1001, 34366, 3.5, '04-MAR-11', '02-MAR-11', 3);
INSERT INTO DETAILRENTAL VALUES (1001, 61353, 2, '04-MAR-11', '03-MAR-11', 1);
INSERT INTO DETAILRENTAL VALUES (1002, 59237, 3.5, '04-MAR-11', '04-MAR-11', 3);
INSERT INTO DETAILRENTAL VALUES (1003, 54325, 3.5, '04-MAR-11', '09-MAR-11', 3);
INSERT INTO DETAILRENTAL VALUES (1003, 61369, 2, '06-MAR-11', '09-MAR-11', 1);
INSERT INTO DETAILRENTAL VALUES (1003, 61388, 0, '06-MAR-11', '09-MAR-11', 1);
INSERT INTO DETAILRENTAL VALUES (1004, 34341, 2, '07-MAR-11', '07-MAR-11', 1);
INSERT INTO DETAILRENTAL VALUES (1004, 34367, 3.5, '05-MAR-11', '07-MAR-11', 3);
INSERT INTO DETAILRENTAL VALUES (1004, 44392, 3.5, '05-MAR-11', '07-MAR-11', 3);
INSERT INTO DETAILRENTAL VALUES (1005, 34342, 2, '07-MAR-11', '05-MAR-11', 1);
INSERT INTO DETAILRENTAL VALUES (1005, 44397, 3.5, '05-MAR-11', '05-MAR-11', 3);
INSERT INTO DETAILRENTAL VALUES (1006, 34366, 3.5, '05-MAR-11', '04-MAR-11', 3);
INSERT INTO DETAILRENTAL VALUES (1006, 61367, 2, '07-MAR-11', NULL, 1);
INSERT INTO DETAILRENTAL VALUES (1007, 34368, 3.5, '05-MAR-11', NULL, 3);
INSERT INTO DETAILRENTAL VALUES (1008, 34369, 3.5, '05-MAR-11', '05-MAR-11', 3);
INSERT INTO DETAILRENTAL VALUES (1009, 54324, 3.5, '05-MAR-11', NULL, 3);

SELECT * FROM MOVIE;
DESCRIBE MOVIE;
--1. Write the SQL command to change the movie year for movie number 1245 to 2008.
UPDATE MOVIE
SET MOVIE_YEAR=2008
WHERE MOVIE_NUM=1245;

--2.Write a query to display the movie title, movie year, 
--and movie genre for all movies sorted by movie genre in ascending order, then sorted by movie year in descending order within genre
SELECT MOVIE_TITLE, MOVIE_YEAR, MOVIE_GENRE
FROM MOVIE
ORDER BY MOVIE_GENRE , MOVIE_YEAR DESC;

--3.Write a query to display the movie title, movie year, 
--and movie cost for all movies that contain the word “hope” anywhere in the title. Sort the results in ascending order by title
SELECT MOVIE_TITLE, MOVIE_YEAR, MOVIE_COST
FROM MOVIE
WHERE UPPER(MOVIE_TITLE) LIKE '%HOPE%'
ORDER BY MOVIE_TITLE;
--4.Write a query to display the movie number, movie title, movie cost, and movie genre 
--for all movies that are either action or comedy movies or that have a cost that is less than $50. Sort the results in ascending order by genre
SELECT MOVIE_NUM, MOVIE_TITLE, MOVIE_COST,MOVIE_GENRE
FROM MOVIE
WHERE MOVIE_GENRE IN ('ACTION','COMEDY') OR MOVIE_COST<50 
ORDER BY MOVIE_GENRE;
--5.Write a query to display the movie number, and movie description for all movies 
--where the movie description is a combination of the movie title, movie year and movie genre with the movie year enclosed in parentheses
SELECT MOVIE_NUM, CONCAT(MOVIE_TITLE,
CONCAT(' (',
CONCAT(MOVIE_YEAR,
CONCAT(') ',MOVIE_GENRE)))) AS MOVIE_DESCRIPTION
FROM MOVIE;

SELECT MOVIE_NUM,(MOVIE_TITLE||' '||'('||MOVIE_YEAR||')'||' '||MOVIE_GENRE)AS MOVIE_DESCRIPTION
FROM MOVIE;
--6.Write a query to display the movie genre and the number of movies in each genre.
SELECT MOVIE_GENRE,COUNT(MOVIE_GENRE) AS "NUMBER OF MOVIES" 
FROM MOVIE
GROUP BY MOVIE_GENRE
ORDER BY MOVIE_GENRE;

--7.Write a query to display the movie genre and average cost of movies in each genre.
SELECT MOVIE_GENRE,ROUND(AVG(MOVIE_COST),2) AS "AVERAGE COST" 
FROM MOVIE
GROUP BY MOVIE_GENRE
ORDER BY MOVIE_GENRE;

--8.Write a query to display the movie title, movie genre, price description, and price rental fee for all movies with a price code
SELECT M.MOVIE_TITLE, M.MOVIE_GENRE,P.PRICE_DESCRIPTION, P.PRICE_RENTFEE
FROM PRICE P
INNER JOIN MOVIE M ON P.PRICE_CODE=M.PRICE_CODE
ORDER BY PRICE_DESCRIPTION DESC;

SELECT MOVIE_TITLE, MOVIE_GENRE,PRICE_DESCRIPTION, PRICE_RENTFEE
FROM PRICE P, MOVIE M
WHERE P.PRICE_CODE=M.PRICE_CODE
ORDER BY PRICE_DESCRIPTION DESC;

SELECT * FROM PRICE;
SELECT * FROM MOVIE;

--9.Write a query to display the movie genre and average price rental fee for movies in each genre that have a price
SELECT MOVIE_GENRE,ROUND(AVG(PRICE_RENTFEE),2) AS "AVERAGE RENTAL FEE"
FROM MOVIE M
INNER JOIN PRICE P ON M.PRICE_CODE=P.PRICE_CODE
GROUP BY MOVIE_GENRE
ORDER BY MOVIE_GENRE;

--10. Write a query to display the minimum balance, maximum balance, and average balance for memberships that have a rental.
/*SELECT MIN(MEM_BALANCE)AS MINIMUM_BALANCE ,MAX(MEM_BALANCE)AS MAXIMUM_BALANCE, ROUND(AVG(MEM_BALANCE),2)AS AVERAGE_BALANCE
FROM MEMBERSHIP M,RENTAL R
WHERE M.MEM_NUM=R.MEM_NUM;

SELECT * FROM MEMBERSHIP;
SELECT * FROM RENTAL;

SELECT M.MEM_NUM,MEM_BALANCE,R.MEM_NUM
FROM MEMBERSHIP M, RENTAL R
WHERE M.MEM_NUM=R.MEM_NUM;

SELECT MIN(MEM_BALANCE)AS MINIMUM_BALANCE ,MAX(MEM_BALANCE)AS MAXIMUM_BALANCE,ROUND(AVG(MEM_BALANCE),2)AS AVERAGE_BALANCE
FROM MEMBERSHIP M,RENTAL R
WHERE M.MEM_NUM=R.MEM_NUM;*/

SELECT MIN(MEM_BALANCE)AS MINIMUM_BALANCE ,MAX(MEM_BALANCE)AS MAXIMUM_BALANCE, ROUND(AVG(MEM_BALANCE),2)AS AVERAGE_BALANCE
FROM
(SELECT M.MEM_NUM,COUNT(M.MEM_NUM),M.MEM_BALANCE
FROM MEMBERSHIP M,RENTAL R
WHERE M.MEM_NUM=R.MEM_NUM
GROUP BY M.MEM_NUM,M.MEM_BALANCE HAVING COUNT(M.MEM_NUM)>=1);

--11. Write a query to display the movie title and movie year for all movies that have a price code.
SELECT MOVIE_TITLE, MOVIE_YEAR
FROM PRICE P
INNER JOIN MOVIE M 
ON P.PRICE_CODE=M.PRICE_CODE; 

--12.Write a query to display the movie title, movie year, and movie cost for all movies that have a cost between $44.99 and $49.99
SELECT MOVIE_TITLE,MOVIE_YEAR,MOVIE_COST
FROM MOVIE
WHERE MOVIE_COST BETWEEN 44.99 AND 49.99;

--13.Write a query to display the movie title, movie year, price description, 
--and price rental fee for all movies that are in the genres Family, Comedy, or Drama
SELECT MOVIE_TITLE,MOVIE_YEAR,PRICE_DESCRIPTION,PRICE_RENTFEE,MOVIE_GENRE
FROM MOVIE M  
JOIN PRICE P ON P.PRICE_CODE=M.PRICE_CODE
WHERE MOVIE_GENRE IN ('FAMILY','COMEDY','DRAMA');

--14.Write a query to display the movie number, movie title, and movie year for all movies that do not have a video.
SELECT MOVIE_NUM,MOVIE_TITLE,MOVIE_YEAR
FROM MOVIE
WHERE MOVIE_NUM NOT IN (SELECT MOVIE_NUM FROM VIDEO);

--15.Write a query to display the membership number, first name, last name, and balance of the memberships that have a rental.
SELECT UNIQUE(M.MEM_NUM),MEM_FNAME,MEM_LNAME,MEM_BALANCE
FROM MEMBERSHIP M
JOIN RENTAL R 
ON M.MEM_NUM=R.MEM_NUM
ORDER BY MEM_NUM;

--16.Write a query to display the rental number, rental date, video number, 
--movie title, due date, and return date for all videos that were returned after the due date. 
--Sort the results by rental number and movie title

SELECT * FROM DETAILRENTAL;
SELECT RENT_DATE FROM RENTAL WHERE RENT_NUM IN;

SELECT RENT_DATE,R.RENT_NUM,VID_NUM,DETAIL_DUEDATE,DETAIL_RETURNDATE FROM DETAILRENTAL D
JOIN RENTAL R ON R.RENT_NUM=D.RENT_NUM
WHERE DETAIL_RETURNDATE>DETAIL_DUEDATE;

SELECT UNIQUE(MOVIE_TITLE) FROM MOVIE M JOIN VIDEO V ON M.MOVIE_NUM=V.MOVIE_NUM
JOIN DETAILRENTAL D ON V.VID_NUM=D.VID_NUM;

SELECT R.RENT_NUM,TO_CHAR(R.RENT_DATE,'DD-MON-YY')AS RENT_DATE,V.VID_NUM,M.MOVIE_TITLE,TO_CHAR(D.DETAIL_DUEDATE,'DD-MON-YY')AS DETAIL_DUEDATE,TO_CHAR(D.DETAIL_RETURNDATE,'DD-MON-YY')AS DETAIL_RETURNDATE
FROM MOVIE M 
JOIN VIDEO V ON M.MOVIE_NUM=V.MOVIE_NUM
JOIN DETAILRENTAL D ON V.VID_NUM=D.VID_NUM
JOIN RENTAL R ON R.RENT_NUM=D.RENT_NUM
WHERE DETAIL_RETURNDATE>DETAIL_DUEDATE
ORDER BY RENT_NUM,MOVIE_TITLE;

--17.Write a query to display the membership name (concatenate the first name and last name with a space between them 
--into a single column), membership address (concatenate the street, city, state, and zip codes into a single column with spaces
SELECT MEM_FNAME||' '||MEM_LNAME AS MEMBERSHIP_NAME,MEM_STREET||' '||MEM_CITY||', '||MEM_STATE||', '||MEM_ZIP AS MEMBERSHIP_ADDRESS
FROM MEMBERSHIP;

--18.Write a query to display the rental number, rental date, video number, movie title, due date, return date, detail fee, and number of days past
--the due date that the video was returned for each video that was returned after the due date. Sort the results by rental number and movie title
SELECT R.RENT_NUM,TO_CHAR(R.RENT_DATE,'DD-MON-YY')AS RENT_DATE,V.VID_NUM,M.MOVIE_TITLE,TO_CHAR(D.DETAIL_DUEDATE,'DD-MON-YY')AS DETAIL_DUEDATE,
TO_CHAR(D.DETAIL_RETURNDATE,'DD-MON-YY')AS DETAIL_RETURNDATE,D.DETAIL_FEE,D.DETAIL_RETURNDATE-D.DETAIL_DUEDATE AS "DAYS PASSED DUE"
FROM MOVIE M 
JOIN VIDEO V ON M.MOVIE_NUM=V.MOVIE_NUM
JOIN DETAILRENTAL D ON V.VID_NUM=D.VID_NUM
JOIN RENTAL R ON R.RENT_NUM=D.RENT_NUM
WHERE DETAIL_RETURNDATE>DETAIL_DUEDATE
ORDER BY RENT_NUM,MOVIE_TITLE;

--19.Write a query to display the rental number, rental date, movie title, and detail fee for each movie that was returned on or before the due date.
SELECT R.RENT_NUM,TO_CHAR(R.RENT_DATE,'DD-MON-YY')AS RENT_DATE,M.MOVIE_TITLE,D.DETAIL_FEE
FROM MOVIE M 
JOIN VIDEO V ON M.MOVIE_NUM=V.MOVIE_NUM
JOIN DETAILRENTAL D ON V.VID_NUM=D.VID_NUM
JOIN RENTAL R ON R.RENT_NUM=D.RENT_NUM
WHERE DETAIL_RETURNDATE<=DETAIL_DUEDATE
ORDER BY RENT_NUM;

--20.Write a query to display the membership number, last name, and total rental fees earned from that membership.
--The total rental fee is the sum of all of the detail fees (without the late fees) from all movies that the membership has rented.
SELECT M.MEM_NUM,M.MEM_LNAME,M.MEM_FNAME,SUM(D.DETAIL_FEE)
FROM MEMBERSHIP M, RENTAL R, DETAILRENTAL D
WHERE M.MEM_NUM=R.MEM_NUM
AND R.RENT_NUM = D.RENT_NUM
GROUP BY M.MEM_NUM, M.MEM_LNAME, M.MEM_FNAME 
ORDER BY MEM_NUM;


;
SELECT M.MEM_NUM, M.MEM_LNAME, M.MEM_FNAME, SUM(D.DETAIL_FEE) AS "RENTAL FEE REVENUE"
FROM MEMBERSHIP M, RENTAL R, DETAILRENTAL D
WHERE M.MEM_NUM=R.MEM_NUM
AND R.RENT_NUM=D.RENT_NUM
GROUP BY M.MEM_NUM, M.MEM_LNAME, M.MEM_FNAME
ORDER BY MEM_NUM;